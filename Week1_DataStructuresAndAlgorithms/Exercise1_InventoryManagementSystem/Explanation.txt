Efficient data structures and algorithms are crucial for inventory management systems because they:
    Enable fast searching, updating, and deleting of products, which is important as the inventory grows.
    Reduce memory usage and improve performance, ensuring the system remains responsive.
    Support scalability, allowing the system to handle thousands or millions of products without significant slowdowns.

ArrayList:
    Good for small to medium inventories.
    Simple to use and allows dynamic resizing.
    Searching, updating, and deleting by product ID require iterating through the list (linear search).

HashMap (Recommended for large inventories):
    Maps product IDs to Product objects.
    Provides average constant time (O(1)) for add, update, and delete operations.
    Efficient for large datasets where quick access by ID is needed.

Operation	                              Time Complexity Explanation
Add	O(1) (amortized)	           Adding at the end is fast.
Update	O(n)	                        Must search for the product by ID.
Delete	O(n)	                         Must search for the product, then remove it (which may shift elements).

Switch to HashMap:
Using a HashMap<Integer, Product> allows direct access to products by their ID, making add, update, and delete operations average O(1) time.
Indexing:
If you need to search by other fields (like name), consider additional maps or indexes.
Batch Operations:
For very large inventories, batch processing and lazy updates can improve performance.